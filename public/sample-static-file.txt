Hey there!

If you are not using the sample project, use the command below to start 
the project from scratch, this command will create the package.json 
in the project directory.

npm init --yes

To set Environment Variables:

-set PORT=5000

--------------------------- Mongo samples

const mongoose = require('mongoose');

const connectionSting = 'mongodb+srv://erasmosoares:password@cluster0.l0jos.mongodb.net/playground?retryWrites=true&w=majority';

mongoose.connect(connectionSting, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('Connected to MongoDb...'))
    .catch(err => console.error('Could not connect to MongoDB...', err));

const courseSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true
    }, //validation
    author: {
        type: String,
        minlength: 5,
        maxlength: 255
    },
    tags: [String],
    date: { type: Date, default: Date.now },
    isPublished: Boolean
});

const Course = mongoose.model('Course', courseSchema);

const ascending = 1;
const descending = -1;

/*
Comparinson Query operatos

{$eq:} equal
{$ne:} not equal
{$gt:} greater than
{$gtw:} greater than or equal to
{$lt:} less than
{$lte:} less than or equal to
{$in: [1,2,3]} in
{$nin:} not in

Logical

or([{author:'Erasmo'},{isPublished:true}])
and([{author:'Erasmo'},{isPublished:true}])

Regular Expression
.find({author:/^Erasmo/i}) starts with
.find({author:/Erasmo$/i}) ends with
.find({author:/.*Erasmo.* /i}) contains
*/

// POST
async function createCourse() {
    const course = new Course({
        name: 'React Course',
        author: 'Esaj',
        tags: ['react', 'frontend'],
        isPublished: true
    });

    try {
        const result = await course.save();
        console.log(result);
    } catch (ex) {
        for (field in ex.errors)
            console.log(ex.errors[field].message);
    }
}

// GET
async function getCourses() {
    const courses = await Course
        .find({ isPublished: true, tags: 'frontend' })
        .limit(10)
        .sort({ name: ascending }) //1 ascending order
        .select({ name: ascending, author: descending }); //get only names and tags

    console.log(courses);
}

/**
 * PUT
 */
async function updateCourse(id) {
    const course = await Course.findByIdAndUpdate(id, {
        $set: {
            isPublished: false,
            author: 'Erasmo'
        }
    });

    console.log(course);
}

/**
 * DELETE
 */
async function deleteCourse(id) {
    const result = await Course.findOneAndDelete({ _id: id });
    console.log(result);
}

// Count
async function countCourses() {
    const courses = await Course
        .find({ isPublished: true, tags: 'frontend' })
        .limit(10)
        .sort({ name: ascending }) //1 ascending order
        .count();

    console.log(courses);
}

// pagination
// /api/courses?pageNumber=2&pageSize=10
async function paginationCourses() {
    const pageNumber = 1; //query string parameter
    const pageSize = 10; //query string parameter

    const flipPage = ((pageNumber - 1) * pageSize)

    const courses = await Course
        .find({ isPublished: true, tags: 'frontend' })
        .skip(flipPage)
        .limit(pageSize)
        .sort({ name: ascending }) //1 ascending order
        .select();

    console.log(courses);
}



//createCourse();
//getCourses();
//countCourses();
//paginationCourses();
//updateCourse('5f91e48cbc7f781e804e5651');
//deleteCourse('5f91e48cbc7f781e804e5651');


---------------

// Simulating an unhandled promise rejection
//const p = Promise.reject(new Error('Something failed miserably'));
//p.then(() => console.log('Done'));

// Simulating an unhandled exception
//throw new Error('Something failed during startup');

